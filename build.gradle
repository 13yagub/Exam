plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = project.group
version = project.version
description = project.hasProperty('description') ? project.description : 'Exam'

java {
    toolchain {
        def ver = project.hasProperty('javaVersion') ? project.javaVersion : '21'
        languageVersion = JavaLanguageVersion.of(ver.toInteger())
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.maven.apache.org/maven2' }
}

// Устанавливаем значения для версий
def lombokVersion = project.hasProperty('lombokVersion') ? project.lombokVersion : '1.18.30'
def springdocVersion = project.hasProperty('springdocVersion') ? project.springdocVersion : '2.2.0'
def postgresqlVersion = project.hasProperty('postgresqlVersion') ? project.postgresqlVersion : '42.6.0'
def junitPlatformLauncher = project.hasProperty('junitPlatformLauncher') ? project.junitPlatformLauncher : '1.10.0'

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    runtimeOnly "org.postgresql:postgresql:${postgresqlVersion}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly "org.junit.platform:junit-platform-launcher:${junitPlatformLauncher}"
}

tasks.named('test') {
    useJUnitPlatform()
}
